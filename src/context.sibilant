(namespace repl)

(include "kit/header")
(import-namespace kit)

(include "../interface/index.sibilant")

(import-namespace interface)

(include "../macros")

(require! 'child_process 'repl 'fs 'sibilant 'net  'vm
          (lit inspect) 'util
          (lit Event-emitter) "./event-emitter")


(var (lit (__ _)) R)

(def-interface Context (scope)

  (gett context-type this)

  (def-generic create (objects context-type)
    ((create context-type) (.create-context vm (mixin objects))))

  (def-generic run-in ( string scope)
    (.run-in-context vm  string scope ))) 


(def-curried write-line (data socket)
  (make-promise (.write socket (+ (.to-string data) "\n") (-> (success data)))))

(def-curried write-js (js socket)
  (make-promise (.write socket ("```js\n"
                                js
                                "\n```\n")
                        (-> (success js)))))

(var strip-comments (#-> .to-string (.split ";") first)

     transpile-sibilant (#-> sibilant (get 'js))
     run-and-inspect (#-> (.then  (#-> context.run-in))
                          (.then inspect)
                          (.catch inspect)))

(def-interface Sibilant-writer (writable)
  (def-generic write (data writable context)
    (pipe data 
          strip-comments
          transpile-sibilant
          success
          (try (fail e))
          make-promise
          (.then (write-js _ writable ))
          run-and-inspect
          (.then (write-line  _ writable )))))
