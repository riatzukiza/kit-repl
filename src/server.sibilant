(namespace repl)

(include "kit/header")
(import-namespace kit)

(include "../interface/index.sibilant")

(import-namespace interface)

(include "../macros")
(import-namespace repl)

(require! 'child_process 'repl 'fs 'sibilant 'net  'vm 'util
          (lit Event-emitter) "./event-emitter")


(.include sibilant "kit/header")

(var log-file (fs.create-write-stream "./log"))

(var log-streams (new Set [log-file]))

(var stdout process.stdout)

(export log-streams)


(def run-in (context string )
  (.run-in-context vm  string context))

(def-curried write-line (data socket)
  (make-promise (.write socket (+ (.to-string data) "\n") success)))


(var (lit _) R)

(def-curried bind-eval (context socket data)
  (pipe (make-promise
         (try (success (get (sibilant (.to-string data)) 'js ))
              (fail e)))
        (.then (write-line _ socket ))
        (.then  (run-in context))
        (.then inspect)
        (.catch inspect)
        (.then (write-line  _ socket ))))

(def create-server (*context)
  (.create-server net (bind-socket (create-context *context))))

(def-curried bind-socket  (context  socket)
  "Binds a socket to a context, causing all data from the socket to be parsed to
js from sibilant and evaluated in the context given"
  (pipe socket
        (.on  'data (bind-eval context socket))
        (.on 'close (-> (.delete log-streams socket))))
  (.add log-streams socket))

(def create-context (*context)
  (.create-context vm (mixin [*context (lit sibilant)])))

(def-interface Server
    ((*context global)
     (tcp-server (create-server *context)))

  (extend Event-emitter)

  (def spawn ()
    (.create Object this))

  (def bind (context)
    (.init this context))

  (def despawn ())

  (def-generic open (port on-open tcp-server)
    (fluently

     (when (function? on-open)
       (.on this 'open on-open))

     (.listen tcp-server (lit port)
                       (-> (.emit this 'open)))) )

  (def-generic close (tcp-server)
    (fluently (.close tcp-server (-> (.emit this 'close))))))

(export Server)

