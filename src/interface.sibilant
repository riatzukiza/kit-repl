(namespace interface)

(load "./interface/meta")

(macro in (  o k) [k " in " o])
(macro define (name base ...body)
       `(loose-var @name (.define @base (quote @name)
                                  (lit ...@body))))

(var Interface {})

(describe Interface ( *symbols {}) ( *types {})
          (init (name *obj (*types {}) (*symbols {}))))

(def-generic Interface.define
    (name

     *obj *types *symbols

     ( *shares (or *obj.borrows *obj.shares []))
     ( *ext (or *obj.extend {}))
     ( *build *obj.build))


  (if (in  *symbols name)

      (mixin *obj (get *types (get *symbols name)))
      (collect m (extend  *ext (mixin  [ (lit name (symbol *symbol))
                                         (dots *shares) ]
                                       *obj))

               (set *symbols name *symbol)
               (set *types  *symbol m)

               (if *build (.build m )))))


(export Interface)
