(namespace repl)

(include "kit/header")

(import-namespace kit)

(include "../interface/index.sibilant")

(import-namespace interface)

(require!  'fs  'net  'vm
          (lit Event-emitter) "../event-emitter"
          hook "../../hook.js")

(macro fluently (...body)
       `(scope ...@body this))

(.include sibilant "kit/header")

(var log-file (fs.create-write-stream "./log"))

(var time (lit (formatted (=> (d) ("[" (Date.now) "]:" (.to-string d))))))

(var stdout process.stdout)

(hook stdout)

(def run-in (context string )
  (.run-in-context vm  string context))

(def-curried bind-eval (context data)
  ""
  (run-in context (get (sibilant (.to-string data)) 'js )))

(def create-server (*context)
  "create a server that listens for lisp fragments and evaluates them as js when they are complete."
  (.create-server net (bind-socket (create-context *context))))

(def-curried fwrite (data stream)
  "curried invocation of the write method of a stream."
  (.write stream data))

(def-curried bind-socket  (context  socket)
  "Binds a socket to a context, causing all data from the socket to be parsed to
js from sibilant and evaluated in the context given"
  (.on socket 'data (bind-eval context))
  (.hook stdout 'write
         (lambda (s encoding fd write)
           (log socket s write))))

(def create-context (*context)
  (.create-context vm (mixin [*context (lit require sibilant)])))


(def-interface Server
    ((*context global)
     (tcp-server (create-server *context)))

  (extend Event-emitter)

  (def spawn (context) ((create this) context))

  (def despawn ())

  (def-generic open (port tcp-server)
    (fluently (.listen tcp-server (lit port) (-> (.emit this 'open)))))

  (def-generic close (tcp-server)
    (fluently (.close tcp-server (-> (.emit this 'close))))))


(export Server)
