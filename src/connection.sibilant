
(def-curried run-in (context string )
  (.run-in-context vm  string context))

(def-curried write-line (data socket)
  (make-promise (.write socket (+ (.to-string data) "\n") (-> (success data)))))

(def-curried write-js (js socket)
  (make-promise (.write socket ("```js\n"
                                js
                                "\n```\n")
                        (-> (success js)))))

;; (def-interface Logger ()
;;   (def write ()))
;; (macro switch! (v ...pairs)
;;        (var default-expression (if (odd? pairs.length) (.pop pairs)))
;;        ["switch(" v ") {"
;;                   (bulk-map pairs (=> (value expression)
;;                                       ["case " value ":" ]
;;                                       ))
;;                   "}"]

;;        )
;; (switch char

;;         (";"  (assign looping false)
;;               break)
;;         ("\"" (assign this.in-quote true)
;;               break)

;;         ("("  (incr this.parens)
;;               break)
;;         (")"  (decr this.parens)
;;               break)

;;         ("["  (incr this.square-braces)
;;               break)
;;         ("]"  (decr this.square-braces)
;;               break)

;;         ("{"  (incr this.curly-braces)
;;               break)
;;         ("}"  (decr this.curly-braces)
;;               break))

;; (var special-chars
;;      {";" (assign looping false)
;;       "\"" (assign this.in-quote true)
;;       "(" (incr this.parens)
;;       ")" (decr this.parens)

;;       "[" (incr this.square-braces)
;;       "]" (decr this.square-braces)

;;       "{" (incr this.curly-braces)
;;       "}" (decr this.curly-braces)})


(def-interface Accumulator ())



(def-interface Connection (socket evaluator)

  (connections (new Map))

  (def spawn (socket context)
    (remember this.connections socket
              ((create Connection) socket
               ((create Evaluator)
                socket
                context))))

  (def-generic start (socket evaluator)
    (.add log-streams
          (pipe socket
                (.on  'data (#-> evaluator.bind))
                (.on 'close (-> (.delete log-streams socket))))))

  (def stop ()))
