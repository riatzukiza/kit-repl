(namespace repl)
(include "kit/header")
(import-namespace kit)

(include "../interface/index.sibilant")
(import-namespace interface)

(require! 'readline
          'net)

(include "../macros")

(def seconds (n) (* n 1000))
(var log-reply (=> (d) (print "reply:|" d)(print "lisp" (.to-string d)))
     log-error (=> (e) (.error console e.message)))

(def-interface Client
    (port
     host
     input
     output
     (retry-interval (seconds 5))

     (rl (.create-interface readline (lit input output (prompt "#>")))))

  (def spawn ( (lit port host

                    retry-interval

                    input output))
    ((create Client)

     port host
     input output

     retry-interval

     ))

  (def-generic *reconnect (retry-interval)
    (set-timeout (-> (.connect this)) retry-interval))

  (def-generic connect (port rl)
    (fluently (.on  rl 'line (fpipe this.*socket.write))
              (assign this.*socket
                      (pipe (.connect net port)
                            (.on  'data log-reply)
                            (.on  'connect (-> (print 'connected)))
                            (.on 'close (-> (print "connection closed,attempting to reconnect")
                                            (.*reconnect this )))
                            (.on 'error log-error))))))
(export Client)
