(namespace repl)

(require! 'readline
          'net)

(def-interface Client
    (port
     host
     input
     output

     (retry-interval (seconds 5))
     (rl (.create-interface readline (lit input output (prompt "#>")))))

  (clients (new Map))

  (def-generic spawn ( (lit port host

                            retry-interval

                            input output)
                       clients)

    (remember this.clients ("" host ":" port)
              ((create Client) port host input output retry-interval)))

  (def-generic *reconnect (retry-interval)
    (pipe (wait retry-interval)
          (.then (-> (.connect this)))))

  (def write (d)
    (make-promise
     (pipe (.once this.*socket 'error fail)
           (.write  d (-> (.remove-listener this.*socket 'error fail)
                          (success))))))

  (def-generic connect (port rl)
    (fluently (.on  rl 'line (fpipe this.write))
              (assign this.*socket
                      (pipe (.connect net port)
                            (.on  'data log-reply)
                            (.on 'close (-> (.*reconnect this )))
                            (.on 'error log-error))))))
(export Client)
