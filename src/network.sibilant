(def-interface Message ())

(def-actor Endpoint (socket network)

  (def-generic start (socket network)
    (.on socket 'data
         (=> (value)
             (.emit this 'packet [value this])
             (.emit network 'packet [value this]))))

  (def stop ())

  (def spawn (socket network)
    (remember network.endpoints socket.remote-address
              ((create this)
               socket
               network)))

  (def-task send (msg socket network)
    (make-promise
     (.write socket msg success))))

;; (def-interface Endpoint.Outbound (socket network)

;;   (extend Endpoint)

;;   (def spawn (socket network)
;;     (remember network.endpoints socket.remote-address
;;               ((create this)
;;                socket
;;                network)))

;;   (def-task send (msg socket network)
;;     (make-promise
;;      (.write socket msg success))))

(def-actor Network.Listener
    (network
     (endpoints (new Map))
     (server (.create-server net )))

  (def spawn ())
  (def start ())
  (def stop ()))

(def-actor Network
    ((endpoints (new Map))
     (listeners (new Map)))

  (def-task send ((lit address
                       port
                       message)
                  endpoints)

    (remember sockets address (.connect net port address)))

  (def-task listen (port))

  (def spawn () ((create this)))

  (def despawn ())

  (def-generic start (port listener)

    (fluently
     (pipe listener
           (.on 'connect  (#-> (Endpoint.spawn this)))
           (.listen (lit port)
                    (-> (.emit this 'start))))) )

  (def-generic stop (listener)
    (fluently (.close listener (-> (.emit this 'close))))))
