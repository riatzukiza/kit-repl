
(.include sibilant "kit/header")

(var log-file (fs.create-write-stream "./log"))

(var log-streams (new Set [log-file]))

(var stdout process.stdout)

(export log-streams)



(def-curried write-line (data socket)
  (make-promise (.write socket (+ (.to-string data) "\n") (-> (success data)))))

(def-curried write-js (js socket)
  (make-promise (.write socket ("```js\n"
                                js
                                "\n```\n")
                        (-> (success js)))))

(var (lit (__ _)) R)

(def seconds (n) (* n 1000))
(var log-reply (=> (d) (print (.to-string d)))
     log-error (=> (e) (.error console e.message)))


(def create-server (*context)
  (.create-server net (bind-socket (create-context *context))))

(def-curried bind-socket  (context  socket)
  "Binds a socket to a context, causing all data from the socket to be parsed to
js from sibilant and evaluated in the context given"

  (var reader (.start ((create Reader))))

  (.on reader 'expression (bind-eval context socket))

  (pipe socket
        (.on  'data (#-> reader.send ))
        (.on 'close (-> (.delete log-streams socket))))
  (.add log-streams socket))

(def create-context (*context)
  (.create-context vm (mixin [*context (lit sibilant)])))
