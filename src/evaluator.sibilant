

(namespace repl)

(include "kit/header")
(import-namespace kit)

(include "../meta")
(import-namespace meta)


(include "kit-interface/header")

(import-namespace interface )

(include "kit-actor/header")
(import-namespace actor)

(include "kit-events/header")
(import-namespace events)



(def-curried run-in (context string )
  (.run-in-context vm  string context
                   (lit (file-name "kit"))))

(require! (lit inspect) 'util
          'vm)

(def Object.copy (o) (mixin o {}))

(define Evaluator Actor

  (init ((context (vm.create-context (.copy Object global))))
        (.call Actor.init this))

  (def-generic spawn () ((create this)))
  (def-generic *send (js context)

    (pipe (Promise.resolve js)
          (.then  (run-in context))
          (.then (=> (result) (.emit this 'message ['result result])))
          (.catch (=> (err) (.emit this 'message ['error err]))))))

(export Evaluator)
