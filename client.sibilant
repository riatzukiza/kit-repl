(namespace repl)
(include "kit/header")
(import-namespace kit)

(include "./interface/index.sibilant")
(import-namespace interface)
(require! 'readline 'net
          program 'commander)

(def seconds (n) (* n 1000))

(pipe program
      (.version "0.0.0")
      (.option "-p, --port" "port to connect on" parse-int 8199)
      (.option "-h, --host" "hostname of evaluation server" "localhost")
      (.option "-t, --retry-interval" (#-> parseInt seconds) 5)
      (.parse process.argv))


(const (lit port host retry-interval) program)

(const **port** port)
(const **reattempt-interval** retry-interval)
(const **host** host)

(var *socket (.connect net **port** **host**)
     options (lit (input process.stdin) (output process.stdout))
     rl (.create-interface readline options))

(.on  rl 'line (#-> ((aprint "request")) *socket.write))
(.on *socket 'data (=> (d) (print "reply" (.to-string d))))

(def reconnect ()
  (set-timeout
   (-> (assign *socket (manage (.connect net **port**))))
   **reattempt-interval**))

(def manage (socket)

  (var attempt-reconnect
       (-> (print "connection closed,attempting to reconnect")
           (reconnect socket)))

  (pipe socket
        (.on  'connect (-> (print 'connected)))
        (.on 'close attempt-reconnect)
        (.on 'error (=> (e) (.log console e.message)))))

(manage *socket)
