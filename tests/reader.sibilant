(namespace repl)
(include "../meta")
(require! 'fs)


(include "../interface/index.sibilant")

(import-namespace interface)

(include "../src/actor")
(include "../src/reader")



(def wait (t)
  (make-promise (set-timeout success t)))
(def seconds (t) (* 1000 t))
(def Array.prototype.each (f)
  (.for-each this f)
  this)
;; I am a comment, WOOOOOOO
(scoped

 (var reader (.start ((create Reader))))

 (var read? false)
 (var expr null)

 (var string (.read-file-sync fs "./tests/reader.sibilant" "utf8"))

 (on reader 'expression (e)
     (print "expression" e)
     (assign expr e)
     (assign read? true))

 (on reader 'message (m) (print "reader message" m))

 (print "sending reader" string)

 (pipe (.send reader string)
       (then-do
        (print "test timed out" reader)
        (if read? (print "test succeeded" expr)
            (print "test failed" expr)))))

