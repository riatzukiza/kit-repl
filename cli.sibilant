(namespace repl)
(include "../kit/header")
(import-namespace kit)
(include "./macros")

(require! (lit Server Client log-streams) "./index"


          hook "./hook.js"
          program "./commander"
          )


(def-curried write (data stream)
  "curried invocation of the write method of a stream."
  (.write stream data))

(def server-log ((dots args))

  (.unhook stdout 'write)
  (print (dots args))
  (.hook stdout 'write log))
(def log  ( data)
  "multiplexed log which which will write data to every client stream"
  (server-log "logging to shells" data)
  (.for-each  log-streams (write (time.formatted data))))
(var (lit stdout stdin) process)
(hook stdout)
(var stdio (lit (input stdin) (output stdout)))
(def time-formatted (d) ("[" (new Date) "]:" (.to-string d)))
;; now comes the part where I start developing the next version of this
;; app using the current one.
;; What I have essentially created is an evaluate for my own programming language "kit".
;; Perhaps it is time I finish it off, get rid of all those annoying "includes"
;; at the top of my files that are highly redundant, and build my own compiler.

(let ((client (.spawn Client stdio))
      (server (.on (.spawn Server ) 'open (-> (print "listening")))))
  (let ((context (lit Server Client
                      (sibilant (require 'sibilant))
                      client server
                      stdout stdin
                      require
                      log-streams
                      hook)))
    (.connect client 8199)
    (.open  (.bind server (mixin global context)) 8199)))



