(namespace repl)
(include "kit/header")
(import-namespace kit)
(include "./macros")

(require! (lit Server Client log-streams) "./index"

          hook "./hook.js"
          ;;program "./commander"
          )

(var (lit stdout stdin) process)

;; (var time (lit (formatted (=> (d) ("[" (new Date) "]:" (.to-string d))))))

;; (def-curried write (data stream)
;;   "curried invocation of the write method of a stream."
;;   (.write stream data))

;; (def server-log ((dots args))

;;   (.unhook stdout 'write)
;;   (print (dots args))
;;   (.hook stdout 'write log))

;; (def log  ( data)
;;   "multiplexed log which which will write data to every client stream"
;;   (server-log "logging to shells" data)
;;   (.for-each  log-streams (write (time.formatted data))))

;; (hook stdout)

(var client (.connect
             (.spawn Client
                     (lit (port 8199)
                          (input stdin)
                          (output stdout))))
     server (.on (.open (.spawn Server) 8199) 'open
                 (-> (print "listening")
                     ;;(.hook stdout 'write log)
                     ))
     )


