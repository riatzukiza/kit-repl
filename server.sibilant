(namespace repl)

(include "kit/header")
(import-namespace kit)


(include "./interface/index.sibilant")

(import-namespace interface)

(include "./macros")
(import-namespace repl)

(require! 'child_process 'repl 'fs 'sibilant 'net 'events 'vm
          )

(.include sibilant "kit/header")

(var log-file (fs.create-write-stream "./log"))


(var log-streams (new Set [log-file]))

(var stdout process.stdout)



(export log-streams)





(def run-in (context string )
  (print "js" string)
  (.run-in-context vm  string context))

(def-curried bind-eval (context data)
  (print 'result
         (try (run-in context (get (sibilant (.to-string data)) 'js ))
              e)))

(def create-server (*context)
  (.create-server net (bind-socket (create-context *context))))

(def-curried bind-socket  (context  socket)
  "Binds a socket to a context, causing all data from the socket to be parsed to
js from sibilant and evaluated in the context given"
  (pipe socket
        (.on  'data (bind-eval context))
        (.on 'close (-> (.delete log-streams socket))))
  (.add log-streams socket))

(def create-context (*context)
  (.create-context vm (mixin [*context (lit require sibilant)])))

(def-interface Event-emitter ()
  (doc ("a simple wrapper around the " `event " modules  type" 'Event-emitter))

  (extend events.Event-emitter.prototype)

  (init (.call events.Event-emitter this)))


(def-interface Server
    ((*context global)
     (tcp-server (create-server *context)))

  (extend Event-emitter)

  (def spawn (context) ((create this) context))

  (def despawn ())

  (def-generic open (port tcp-server)
    (fluently (.listen tcp-server
                       (lit port)
                       (-> (.emit this 'open)))) )

  (def-generic close (tcp-server)
    (fluently (.close tcp-server (-> (.emit this 'close))))))

(export Server)

