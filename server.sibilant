(namespace repl)

(include "kit/header")

(import-namespace kit)

(include "./interface/index.sibilant")

(import-namespace interface)

(require! 'child_process 'repl 'fs 'sibilant 'net 'events 'vm
          hook "./hook.js")

(.include sibilant "kit/header")

(var log-file (fs.create-write-stream "./log"))

(var time (lit (formatted (=> (d) ("[" (new Date) "]:" (.to-string d))))))

(var log-streams (new Set [log-file]))

(var stdout process.stdout)
(hook stdout)

(def server-log ((dots args))

  (.unhook stdout 'write)
  (print (dots args))
  (.hook stdout 'write log))

(def-curried write (data stream)
  "curried invocation of the write method of a stream."
  (.write stream data)
  )

(def log  ( data)
  "multiplexed log which which will write data to every client stream"
  (server-log "logging to shells" data)
  (.for-each  log-streams (write (time.formatted data))))


(def run-in (context string )
  (print "js" string)
  (.run-in-context vm  string context))

(def-curried bind-eval (context data)
  (print 'result
         (try (run-in context (get (sibilant (.to-string data)) 'js ))
              e)))

(def create-server (*context)
  (.create-server net (bind-socket (create-context *context))))

(def-curried bind-socket  (context  socket)
  "Binds a socket to a context, causing all data from the socket to be parsed to
js from sibilant and evaluated in the context given"
  (pipe socket
        (.on  'data (bind-eval context))
        (.on 'close (-> (.delete log-streams socket))))
  (.add log-streams socket))

(def create-context (*context)
  (.create-context vm (mixin [*context (lit require sibilant)])))

(def-interface Event-emitter ()
  (doc ("a simple wrapper around the " `event " modules  type" 'Event-emitter))

  (extend events.Event-emitter.prototype)

  (init (.call events.Event-emitter this)))
(macro fluently (...body)
       `(scoped ...@body this))

(def-interface Repl-server
    ((*context global)
     (tcp-server (create-server *context)))
  (extend Event-emitter)

  (def spawn (context) ((create this) context))

  (def despawn ())

  (def-generic open (port tcp-server)
    (fluently (.listen tcp-server
                       (lit port)
                       (-> (.emit this 'open)))) )

  (def-generic close (tcp-server)
    (fluently (.close tcp-server (-> (.emit this 'close))))))

(.on (.open (.spawn Repl-server) 8199) 'open
     (-> (print "listening")
         (.hook stdout 'write log)
         ))

