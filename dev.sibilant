(namespace dev)

(include "kit/inc/shell")
(import-namespace shell)

p
(get current-version (get this.num-names signifigance))
(def commit (message) (shell (git add ".") (git commit "-m" ("\""message "\""))))

(var sem-ver {num-names {patch 2 minor 1 major 0}})

(def-generic sem-ver.save (message signifigance)
  (pipe (load-json "./package.json")
        (.then (=> (json)
                   (print "before" json)
                   (var current-version (.split json.version "."))
                   (print "current version" current-version)

                   (var commit-type (get this.num-names signifigance))
                   (assign (get current-version commit-type)
                           (+ 1 (parse-int (last current-version) 10)))
                   (for (i (+ commit-type 1) ) (<= i 2) (++ i)
                        (set current-version i 0))

                   (assign json.version (.join current-version "."))
                   (print "after" json)
                   (save-json "./package.json" json)))

        (.then (=> (pkg)
                   (then-do (commit ("" signifigance "update" pkg.name " to " pkg.version ":" message))
                            (print "copying to patch own folder")
                            (shell (cp "-a" "./" ("../"pkg.name"-"pkg.version))))))))

(def-promised save-json (path d)
  (.write-file (require 'fs) path (.stringify JSON d)
               (=> (e) (if e (fail e) (success d)))))

(def-promised load-json (path)
  (.read-file (require 'fs) path
              (=> (err d) (if err (fail err) (success (.parse JSON d))))))
